import { Component, Prop, Event, EventEmitter } from '@stencil/core';
import { Observable, Subject, timer, of} from 'rxjs';
import { map, catchError, tap, takeUntil, switchMap, share, pairwise, filter} from 'rxjs/operators';

@Component({
  tag: 'hue-dimmer-switch',
  styleUrl: 'motion-sensor.css',
  shadow: false
})
export class DimmerSwitchHandler {

  @Prop() ip: string;
  @Prop() raspberry: string;
  @Prop() username: string;
  @Prop() sensor: string;
  @Prop() timeout = 1000;

  @Event() dimmerclick: EventEmitter;


  dimmer: Observable<State>;
  onDestroy$ = new Subject();

  constructor() {}

  componentDidLoad() {
    this.dimmer = timer(0, this.timeout).pipe(
      switchMap(() =>
        fetch(`http://${this.ip}/api/${this.username}/sensors/${this.sensor}`)
      ),
      switchMap(res => res.json()),
      share(),
      map((res: DimmerSwitch) => res.state),
      catchError(() => of(null))
    );


    this.dimmer.pipe(pairwise(),
    filter(([v1,v2]) => (v1.buttonevent % 1000 !== v2.buttonevent % 1000 || ((v1.buttonevent % 1000 === v2.buttonevent % 1000) && (v1.lastupdated !== v2.lastupdated)))),
    tap(console.log),
    tap(this.dimmerclick.emit),
    takeUntil(this.onDestroy$)).subscribe()

  }

  componentDidUnload(): void {
    this.onDestroy$.next();
  }
}

// Generated by https://quicktype.io

export interface DimmerSwitch {
  state:            State;
  swupdate:         Swupdate;
  config:           Config;
  name:             string;
  type:             string;
  modelid:          string;
  manufacturername: string;
  productname:      string;
  diversityid:      string;
  swversion:        string;
  uniqueid:         string;
  capabilities:     Capabilities;
}

export interface Capabilities {
  certified: boolean;
  primary:   boolean;
  inputs:    Input[];
}

export interface Input {
  repeatintervals: number[];
  events:          Event[];
}

export interface Event {
  buttonevent: number;
  eventtype:   string;
}

export interface Config {
  on:        boolean;
  battery:   null;
  reachable: boolean;
  pending:   any[];
}

export interface State {
  buttonevent: number;
  lastupdated: string;
}

export interface Swupdate {
  state:       string;
  lastinstall: string;
}
